#!/bin/bash

artisan () {
    docker compose run --rm backend php artisan "${@:1}"
}

build () {
    docker compose build "${@:1}"
}

composer () {
    docker compose run --rm backend composer "${@:1}"
}

destroy () {
    read -p "This will delete containers, volumes and images. Are you sure? [y/N]: " -r
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then exit; fi
    docker compose down -v --rmi all --remove-orphans
}

down () {
    docker compose down "${@:1}"
}

env () {
    if [ ! -f .env ]; then
        echo "COMPOSE_PROJECT_NAME=online_store" > .env
    fi
}

init () {
    env \
        && down -v \
        && build \
        && docker compose run --rm --entrypoint="//opt/files/init" backend \
        && yarn install \
        && start
}

logs () {
    docker compose logs -f "${@:1}"
}

restart () {
    stop && start
}

start () {
    docker compose up -d
}

stop () {
    docker compose stop
}

update () {
    git pull \
        && build \
        && composer install \
        && artisan migrate \
        && yarn install \
        && start
}

yarn () {
    docker compose run --rm frontend yarn "${@:1}"
}

case "$1" in
    artisan)
        artisan "${@:2}"
        ;;
    build)
        build "${@:2}"
        ;;
    composer)
        composer "${@:2}"
        ;;
    destroy)
        destroy
        ;;
    down)
        down "${@:2}"
        ;;
    init)
        init
        ;;
    logs)
        logs "${@:2}"
        ;;
    restart)
        restart
        ;;
    start)
        start
        ;;
    stop)
        stop
        ;;
    update)
        update
        ;;
    yarn)
        yarn "${@:2}"
        ;;
    *)
        cat << EOF
Command line interface for the Docker-based web development environment demo.
Usage:
    setup <command> [options] [arguments]
Available commands:
    artisan ................................... Run an Artisan command
    build [image] ............................. Build all of the images or the specified one
    composer .................................. Run a Composer command
    destroy ................................... Remove the entire Docker environment
    down [-v] ................................. Stop and destroy all containers
                                                Options:
                                                    -v .................... Destroy the volumes as well
    init ...................................... Initialise the Docker environment and the application
    logs [container] .......................... Display and tail the logs of all containers or the specified one's
    restart ................................... Restart the containers
    start ..................................... Start the containers
    stop ...................................... Stop the containers
    update .................................... Update the Docker environment
    yarn ...................................... Run a Yarn command
EOF
        exit
        ;;
esac